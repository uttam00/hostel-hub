generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phoneNumber   String?
  emailVerified DateTime?
  password      String?
  image         String?     
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  bookings      Booking[]
  reviews       Review[]
  sessions      Session[]
  hostels       Hostel[]  @relation("HostelAdmin")
}

model Hostel {
  id          String       @id @default(cuid())
  name        String
  description String
  address     String
  city        String
  state       String
  zipCode     String
  country     String
  latitude    Float?
  longitude   Float?
  amenities   String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      HostelStatus 
  images      String[]
  reviews     Review[]
  rooms       Room[]
  admins      User[]       @relation("HostelAdmin")
}

model Room {
  id          String    @id @default(cuid())
  roomNumber  String
  roomType    RoomType
  description String?
  price       Float
  capacity    Int
  isAvailable Boolean   @default(true)
  amenities   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hostelId    String
  bookings    Booking[]
  hostel      Hostel    @relation(fields: [hostelId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String    @id @default(cuid())
  checkIn    DateTime
  checkOut   DateTime
  status     Status    @default(PENDING)
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  roomId     String
  room       Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments   Payment[]
}

model Payment {
  id        String        @id @default(cuid())
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  bookingId String
  booking   Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  hostelId  String
  hostel    Hostel   @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  HOSTEL_ADMIN
  SUPER_ADMIN
}

enum RoomType {
  SINGLE
  DOUBLE
  TRIPLE
  DORMITORY
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum HostelStatus {
  ACTIVE
  INACTIVE
}
